
# the definition of composed selections. Can contain as well TCut style selections, e.g.:
# resolved = baseline, btagMM, massCut
# resolvedHighPt = baseline, btagMM, massCut, dau1_pt > 150
# use comma separated lists
[selections]
baseline     = pairType == 1 && dau1_pt > 25 && dau2_pt > 20
btagMM       = bjet1_bID > 0.800 && bjet2_bID > 0.800
massCut      = bH_mass > 90 && bH_mass < 180
resolved     = baseline, btagMM, massCut, isBoosted != 1
dummySel     = btagMM, pairType == 0 && dau1_pt > 19 && dau2_pt > 20
dummySel2    = btagMM, pairType == 0 && dau1_pt > 19 && dau2_pt > 20 && bjet1_pt > 30
SR           = isOS != 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
qcdOStight   = isOS != 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
qcdOSrlx     = isOS != 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
qcdSStight   = isOS == 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
qcdSSrlx     = isOS == 0 && dau1_iso < 0.1 && dau2_iso < 3.0 

## weights to be applied for a certain selections when calling Fill()
## multiple weights are passed as list and are multiplied together
## NOTE: no weight is applied for data (the simple Fill() is used)
[selectionWeights]
baseline = MC_weight, IdAndIsoSF, trigSF, turnOnreweight
btagMM = bTagweightM

[sampleWeights]
TTfullyHad = topPtReweight
TTfullyLep = topPtReweight
TTsemiLep = topPtReweight
#HH    = topPtReweight
Wjet4 = TTtopPtreweight

# define alternative weights to be tested instead of the nominal one
[systematics]
# trigSF         = trigUP:trigSF_up , trigDOWN:trigSF_down
turnOnreweight = rewUP:turnOnreweight_tauup, rewDO:turnOnreweight_taudown

# ROOT-like definition of the binning
[histos]
dau1_pt = 100, 0, 300
dau2_pt = 100, 0, 300

# user defined binning for a variable - has precedence on [histos]
[binning]
HH_mass_raw = 250, 300, 350, 400, 500, 1000

###################

# [syst]
# list = btagSF, tauSF, trigger

## in case no special weight is applied (e.g. nominal), simply put "1"
## use keyword "ALL" to apply to all defined sample/selections/variables
# [btagSF]
# nominal   = weight_expression_nomninal
# up        = weight_expression_up
# down      = weight_expression_down
# appliesToSample = ALL
# appliesToSel    = btag
# appliesToVar    = ALL
